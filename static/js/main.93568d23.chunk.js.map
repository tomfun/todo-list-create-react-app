{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["initialTodos","JSON","parse","localStorage","getItem","Todos","todos","setTodos","ListGroup","map","v","i","Item","text","isComplete","Button","onClick","concat","id","App","useState","newTodoText","setNewTodoText","setInnerTodos","newTodos","setItem","stringify","className","style","margin","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","placeholder","value","onChange","e","target","Math","random","Tabs","defaultActiveKey","Tab","eventKey","title","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAKMA,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,MAEpE,SAASC,EAAT,GAAqC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtB,OACE,cAACC,EAAA,EAAD,UACGF,EAAMG,KAAI,SAACC,EAAGC,GAAJ,OACT,eAACH,EAAA,EAAUI,KAAX,WACGD,EAAE,EADL,IACS,IACND,EAAEG,KACFH,EAAEI,WAAc,cAACC,EAAA,EAAD,CAAQC,QAAS,WAChCN,EAAEI,YAAa,EACfP,EAAS,GAAGU,OAAOX,KAFJ,qEAGU,cAACS,EAAA,EAAD,CAAQC,QAAS,WAC1CN,EAAEI,YAAa,EACfP,EAAS,GAAGU,OAAOX,KAFM,0DANRI,EAAEQ,SAgEhBC,MAhDf,WACE,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA+BF,mBAASpB,GAAxC,mBAAOM,EAAP,KAAciB,EAAd,KACA,SAAShB,EAASiB,GAChBD,EAAcC,GACdrB,aAAasB,QAAQ,WAAYxB,KAAKyB,UAAUF,IAElD,OACE,sBAAKG,UAAU,MAAMC,MAAO,CAACC,OAAQ,OAArC,UACE,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKN,UAAU,OAAOO,UAAU,wBAAhD,UACE,cAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,uBAGA,cAACC,EAAA,EAAD,CAAKD,GAAG,IAAR,SACE,cAACP,EAAA,EAAKS,QAAN,CAAcC,YAAY,sBACZC,MAAOpB,EACPqB,SAAU,SAACC,GACTrB,EAAeqB,EAAEC,OAAOH,YAG1C,cAAC1B,EAAA,EAAD,CAAQC,QAAS,WACfT,EAAS,CAAC,CACRM,KAAMQ,EACNH,GAAI2B,KAAKC,SACThC,YAAY,IACXG,OAAOX,IACVgB,EAAe,KANjB,mEAUJ,eAACyB,EAAA,EAAD,CAAMC,iBAAiB,aAAa9B,GAAG,2BAA2BS,UAAU,OAA5E,UACE,cAACsB,EAAA,EAAD,CAAKC,SAAS,aAAaC,MAAM,kFAAjC,SACE,cAAC9C,EAAD,CAAOC,MAAOA,EAAM8C,QAAO,SAAC1C,GAAD,OAAQA,EAAEI,cAAaP,SAAUA,MAE9D,cAAC0C,EAAA,EAAD,CAAKC,SAAS,WAAWC,MAAM,qEAA/B,SACE,cAAC9C,EAAD,CAAOC,MAAOA,EAAM8C,QAAO,SAAC1C,GAAD,OAAOA,EAAEI,cAAaP,SAAUA,MAE7D,cAAC0C,EAAA,EAAD,CAAKC,SAAS,MAAMC,MAAM,qBAA1B,SACE,cAAC9C,EAAD,CAAOC,MAAOA,EAAOC,SAAUA,aCtD1B8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.93568d23.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { Button, Col, Form, ListGroup, Row, Tab, Tabs } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst initialTodos = JSON.parse(localStorage.getItem('newTodos') || '[]')\n\nfunction Todos({ todos, setTodos }) {\n  return (\n    <ListGroup>\n      {todos.map((v, i) => (\n        <ListGroup.Item key={v.id}>\n          {i+1}:{' '}\n          {v.text}\n          {v.isComplete ? (<Button onClick={() => {\n            v.isComplete = false;\n            setTodos([].concat(todos))\n          }}>Не Сделано</Button>) : (<Button onClick={() => {\n            v.isComplete = true;\n            setTodos([].concat(todos))\n          }}>Сделано</Button>)}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  )\n}\n\nfunction App() {\n  const [newTodoText, setNewTodoText] = useState('')\n  const [todos, setInnerTodos] = useState(initialTodos)\n  function setTodos(newTodos) {\n    setInnerTodos(newTodos)\n    localStorage.setItem('newTodos', JSON.stringify(newTodos))\n  }\n  return (\n    <div className=\"App\" style={{margin: '2em'}}>\n      <Form>\n        <Form.Group as={Row} className=\"mb-3\" controlId=\"formPlaintextPassword\">\n          <Form.Label column sm=\"2\">\n            New to-do\n          </Form.Label>\n          <Col sm=\"8\">\n            <Form.Control placeholder=\"what you want to do\"\n                          value={newTodoText}\n                          onChange={(e) => {\n                            setNewTodoText(e.target.value);\n                          }}/>\n          </Col>\n          <Button onClick={() => {\n            setTodos([{\n              text: newTodoText,\n              id: Math.random(),\n              isComplete: false,\n            }].concat(todos))\n            setNewTodoText('')\n          }}>Добавить</Button>\n        </Form.Group>\n      </Form>\n      <Tabs defaultActiveKey=\"incomplete\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\n        <Tab eventKey=\"incomplete\" title=\"Не завершённые\">\n          <Todos todos={todos.filter((v) => !v.isComplete)} setTodos={setTodos} />\n        </Tab>\n        <Tab eventKey=\"complete\" title=\"Завершённые\">\n          <Todos todos={todos.filter((v) => v.isComplete)} setTodos={setTodos} />\n        </Tab>\n        <Tab eventKey=\"all\" title=\"Все\">\n          <Todos todos={todos} setTodos={setTodos} />\n        </Tab>\n      </Tabs>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}